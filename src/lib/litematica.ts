import { BitView } from 'bit-buffer';
import {
	NbtCompound,
	NbtFile,
	NbtInt,
	NbtList,
	NbtLong,
	NbtLongArray,
	NbtString,
} from 'deepslate';

import { Direction } from '~/form-schema';

import type { Palette } from './palette';

interface Options {
	name: string;
	width: number;
	height: number;
	direction: Direction;
	palette: Palette;
	blocks: Uint8Array;
}

export function generateLitematicaSchematic({
	name,
	width,
	height,
	direction,
	palette,
	blocks,
}: Options) {
	const time = BigInt(new Date().getTime());
	const total = blocks.length;
	const size =
		direction === Direction.Horizontal
			? new NbtCompound()
					.set('x', new NbtInt(width))
					.set('y', new NbtInt(1))
					.set('z', new NbtInt(height))
			: new NbtCompound()
					.set('x', new NbtInt(width))
					.set('y', new NbtInt(height))
					.set('z', new NbtInt(1));
	const paletteArray = Array.from(palette.data.entries());
	const emptyList = new NbtList();

	const bit = Math.max(2, Math.ceil(Math.log2(palette.data.size)));
	const blockStates = new BigUint64Array(Math.ceil((total * bit) / 64));
	const view = new BitView(blockStates.buffer);

	if (direction === Direction.Horizontal) {
		for (let i = 0; i < total; i++) {
			const block = blocks[i];
			const x = i % width;
			const y = Math.floor(i / width);

			view.setBits(bit * (x + width * y), block, bit);
		}
	} else {
		for (let i = 0; i < total; i++) {
			const block = blocks[i];
			const x = i % width;
			const y = Math.floor(i / width);

			view.setBits(bit * (x + width * (height - y - 1)), block, bit);
		}
	}

	const nbt = new NbtCompound()
		.set(
			'Metadata',
			new NbtCompound()
				.set('Author', new NbtString('ra_men_ha_0141'))
				.set(
					'Description',
					new NbtString('Generated by https://dot.chamame.org'),
				)
				.set('EnclosingSize', size)
				.set('Name', new NbtString(name))
				.set('RegionCount', new NbtInt(1))
				.set('TimeCreated', new NbtLong(time))
				.set('TimeModified', new NbtLong(time))
				.set('TotalBlocks', new NbtInt(total))
				.set('TotalVolume', new NbtInt(total)),
		)
		.set('MinecraftDataVersion', new NbtInt(3953))
		.set(
			'Regions',
			new NbtCompound().set(
				name,
				new NbtCompound()
					.set(
						'BlockStatePalette',
						new NbtList(
							paletteArray.map(([id]) =>
								new NbtCompound().set('Name', new NbtString(id)),
							),
						),
					)
					.set('BlockStates', new NbtLongArray(blockStates))
					.set('Entities', emptyList)
					.set('PendingBlockTicks', emptyList)
					.set('PendingFluidTicks', emptyList)
					.set(
						'Position',
						new NbtCompound()
							.set('x', new NbtInt(0))
							.set('y', new NbtInt(0))
							.set('z', new NbtInt(0)),
					)
					.set('Size', size)
					.set('TileEntities', emptyList),
			),
		)
		.set('SubVersion', new NbtInt(1))
		.set('Version', new NbtInt(7));

	const file = new NbtFile('', nbt, 'gzip', false, undefined);

	return file.write();
}
